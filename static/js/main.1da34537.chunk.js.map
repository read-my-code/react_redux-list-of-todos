{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","components/TodoList/TodoList.tsx","app/hooks.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","query","newStatus","filterReducer","filterConditions","status","All","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","React","memo","selectedTodo","dispatch","useDispatch","className","map","id","completed","classNames","title","onClick","currentTodoActions","setTodoModal","useAppSelector","useSelector","TodoFilter","useState","setQuery","sortBy","value","onChange","event","target","Active","filterActions","Completed","placeholder","toLowerCase","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","user","setUser","useEffect","userId","href","email","name","App","isTodosAreLoaded","setIsTodosAreLoaded","filteredTodo","setFilteredTodos","todosFromServer","todosStatus","todoModal","todosToFilter","includes","trim","allTodos","todosActions","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1da34537.chunk.js","sourcesContent":["export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype QueryChange = { type: 'query/Change', payload: string };\n\nconst queryChange = (query: string): QueryChange => ({\n  type: 'query/Change',\n  payload: query,\n});\n\ntype StatusChange = { type: 'status/Change', payload: Status };\n\nconst statusChange = (newStatus: Status): StatusChange => ({\n  type: 'status/Change',\n  payload: newStatus,\n});\n\ntype Action = QueryChange | StatusChange;\n\ntype FilterConditions = {\n  query: string;\n  status: Status;\n};\n\nconst filterReducer = (filterConditions: FilterConditions = {\n  query: '',\n  status: Status.All,\n}, action: Action) => {\n  switch (action.type) {\n    case 'query/Change':\n      return {\n        ...filterConditions,\n        query: action.payload,\n      };\n\n    case 'status/Change':\n      return {\n        ...filterConditions,\n        status: action.payload,\n      };\n\n    default:\n      return filterConditions;\n  }\n};\n\nexport const actions = { queryChange, statusChange };\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddAction = { type: 'todos/ADD', payload: Todo[] };\ntype Action = AddAction;\n\nconst add = (todos: Todo[]): AddAction => ({\n  type: 'todos/ADD',\n  payload: todos,\n});\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/ADD':\n      return [...todos, ...action.payload];\n\n    default:\n      return todos;\n  }\n};\n\nexport const actions = { add };\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ninterface Props {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n}\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  selectedTodo,\n\n}) => {\n  const dispatch = useDispatch();\n\n  const setTodoModal = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr\n            data-cy=\"todo\"\n            className=\"\"\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames({\n                'has-text-danger': !todo.completed,\n                'has-text-success': todo.completed,\n              })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => setTodoModal(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('far', {\n                    'fa-eye': selectedTodo?.id !== todo.id,\n                    'fa-eye-slash': selectedTodo?.id === todo.id,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n});\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Status } from '../../types/Status';\nimport { actions as filterActions } from '../../features/filter';\nimport { useAppSelector } from '../../app/hooks';\n\nexport const TodoFilter: React.FC = React.memo(() => {\n  const [query, setQuery] = useState('');\n  const sortBy = useAppSelector(state => state.filter.status);\n  const dispatch = useDispatch();\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.queryChange(event.target.value.toLowerCase()));\n    setQuery(event.target.value);\n  };\n\n  const handleClearInput = () => {\n    dispatch(filterActions.queryChange(''));\n    setQuery('');\n  };\n\n  const handleFilterSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    switch (value) {\n      case Status.Active:\n        dispatch(filterActions.statusChange(Status.Active));\n        break;\n\n      case Status.Completed:\n        dispatch(filterActions.statusChange(Status.Completed));\n        break;\n\n      default:\n        dispatch(filterActions.statusChange(Status.All));\n    }\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={sortBy}\n            onChange={handleFilterSelect}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={handleInputChange}\n          value={query}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearInput}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoModal: React.FC<Props> = ({ todo }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useDispatch();\n\n  const handleCloseTodoModal = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  useEffect(() => {\n    getUser(todo.userId).then(setUser);\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCloseTodoModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : <strong className=\"has-text-danger\">Planned</strong>}\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useDispatch } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Todo } from './types/Todo';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\nimport { Status } from './types/Status';\n\nexport const App: React.FC = () => {\n  const [isTodosAreLoaded, setIsTodosAreLoaded] = useState(false);\n  const [filteredTodo, setFilteredTodos] = useState<Todo[]>([]);\n  const dispatch = useDispatch();\n  const todosFromServer = useAppSelector(state => state.todos);\n  const query = useAppSelector(state => state.filter.query);\n  const todosStatus = useAppSelector(state => state.filter.status);\n  const todoModal = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    let todosToFilter = todosFromServer;\n\n    if (query) {\n      todosToFilter = todosToFilter.filter(\n        todo => todo.title.toLowerCase().includes(query.toLowerCase().trim()),\n      );\n    }\n\n    if (todosStatus === Status.Active) {\n      todosToFilter = todosToFilter.filter(todo => !todo.completed);\n    } else if (todosStatus === Status.Completed) {\n      todosToFilter = todosToFilter.filter(todo => todo.completed);\n    }\n\n    setFilteredTodos(todosToFilter);\n  }, [todosFromServer, query, todosStatus]);\n\n  useEffect(() => {\n    setIsTodosAreLoaded(false);\n\n    getTodos()\n      .then(allTodos => {\n        dispatch(todosActions.add(allTodos));\n      })\n      .finally(() => setIsTodosAreLoaded(true));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {!isTodosAreLoaded ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={filteredTodo}\n                  selectedTodo={todoModal}\n                />\n              )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {todoModal && (\n        <TodoModal todo={todoModal} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}